/**
 * Created by yejiaming on 2017/9/28.
 */
/**
 * Created by yejiaming on 2017/2/23.
 */
var startTime,
    startY,
    oldY,
    $el,
    $event,
    currentY,
    distance,
    deceleration = 0.0006,
    minValue = 0,
    maxValue;

var getTranslateY = function (dom) {
    var transformString = dom.style.transform;
    if (transformString) {
        return Number(transformString.match(/\+?\-?\d+/g)[0]);
    } else {
        return 0;
    }
};

var handleTouchStart = function (event) {
    event.preventDefault();
    startTime = new Date().getTime();
    startY = event.targetTouches[0].screenY;
    /*每次移动开始时设置初始的oldY的值*/
    oldY = getTranslateY($el);
    $el.style["transitionDuration"] = '0ms';
};

var handleTouchMove = function (event) {
    event.preventDefault();
    currentY = event.targetTouches[0].screenY;
    distance = currentY - startY;
    if (Math.abs(distance) <= 10) {
        return;
    }
    let temDis = distance + oldY;
    $el.style["-webkit-transform"] = 'translateY(' + temDis + 'px)';
    $el.dispatchEvent($event);
};

var handleTouchEnd = function (event) {
    event.preventDefault();
    let temDis = distance + oldY;
    /*计算缓动值*/
    var duration = new Date().getTime() - startTime;
    // 300毫秒是判断间隔的最佳时间
    if (duration < 300 && Math.abs(distance) > 10) {
        var speed = Math.abs(distance) / duration,
            destination; // 加速度因子
        // 初速度为0 距离等于速度的平方除以2倍加速度
        destination = speed * speed / (2 * deceleration) * (distance < 0 ? -1 : 1);
        // 初始时间为0，初始速度为0 时间等于速度除以加速度
        duration = speed / deceleration;
        temDis += destination;
    }
    /*设置最小值*/
    if (temDis > minValue) {
        temDis = minValue;
    }
    /*设置最大值*/
    if (temDis < -maxValue) {
        temDis = -maxValue;
    }
    $el.style["transitionDuration"] = '1000ms';
    $el.style["transitionTimingFunction"] = 'ease-out';
    /*确定最终的滚动位置*/
    setTimeout(() => {
        $el.style["-webkit-transform"] = 'translateY(' + temDis + 'px)';
    }, 0);
    $el.dispatchEvent($event);
};

export var scroll = {
    // 当绑定元素插入到 DOM 中。
    bind: function (el, binding, vnode) {
        // console.log('首次加载挂载到DOM节点中——一次挂载之运行一次');
    },
    inserted: function (el, binding) {
        $el = el;
        maxValue = $el.clientHeight - window.screen.height;
        // console.log('DOM节点挂载到完毕——一次挂载之运行一次');
        $event = new Event('y-scroll');
        el.addEventListener('touchstart', handleTouchStart);
        el.addEventListener('touchmove', handleTouchMove);
        el.addEventListener('touchend', handleTouchEnd);
    },
    update: function (el, binding) {},
    componentUpdated: function (el, binding) {
        // console.log('完成更新DOM节点或者绑定数据——一次挂载之运行多次');
    },
    unbind: function (el, binding) {
        // console.log('取消该节点的挂载——一次挂载之运行一次');
    }
};